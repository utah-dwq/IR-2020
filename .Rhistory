data$Project.Longitude[data$Mgmt_Unit=="No Location Available"] = jitter(-114.014642, factor = 0.01)
data$Project.Latitude[data$Mgmt_Unit=="Statewide"] = jitter(39.419220, factor = 0.01)
data$Project.Longitude[data$Mgmt_Unit=="Statewide"] = jitter(-111.950684, factor = 0.01)
data$Project.Type = as.factor(data$Project.Type)
data = readxl::read_xlsx("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase\\NPS_projects_draft_JB.xlsx")
colnames(data) = gsub(" ", ".", colnames(data))
data$Year.Awarded = paste0(as.character(data$Year.Awarded),"-01-01")
data$Year.Awarded = as.Date(data$Year.Awarded, format = "%Y-%m-%d")
location = na.omit(unique(data[,c("Project.Latitude","Project.Longitude")]))
location = wqTools::assignPolys("wmu_poly", columns = "Mgmt_Unit",data=location, lat = "Project.Latitude", long = "Project.Longitude")
data = merge(data, location, all.x = TRUE)
data$Mgmt_Unit = as.character(data$Mgmt_Unit)
data$Mgmt_Unit[data$Watershed=="Statewide"] = "Statewide"
data$Mgmt_Unit[is.na(data$Mgmt_Unit)] = "No Location Available"
data$Project.Latitude[data$Mgmt_Unit=="No Location Available"] = jitter(41.979736, factor = 0.01)
data$Project.Longitude[data$Mgmt_Unit=="No Location Available"] = jitter(-114.014642, factor = 0.01)
data$Project.Latitude[data$Mgmt_Unit=="Statewide"] = jitter(39.419220, factor = 0.01)
data$Project.Longitude[data$Mgmt_Unit=="Statewide"] = jitter(-111.950684, factor = 0.01)
data$Project.Type = as.factor(data$Project.Type)
View(data)
str(data$Amount.Awarded)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
data = readxl::read_xlsx("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase\\NPS_projects_draft_JB.xlsx")
colnames(data) = gsub(" ", ".", colnames(data))
data$Year.Awarded = paste0(as.character(data$Year.Awarded),"-01-01")
data$Year.Awarded = as.Date(data$Year.Awarded, format = "%Y-%m-%d")
location = na.omit(unique(data[,c("Project.Latitude","Project.Longitude")]))
location = wqTools::assignPolys("wmu_poly", columns = "Mgmt_Unit",data=location, lat = "Project.Latitude", long = "Project.Longitude")
data = merge(data, location, all.x = TRUE)
data$Mgmt_Unit = as.character(data$Mgmt_Unit)
data$Mgmt_Unit[data$Watershed=="Statewide"] = "Statewide"
data$Mgmt_Unit[is.na(data$Mgmt_Unit)] = "No Location Available"
data$Project.Latitude[data$Mgmt_Unit=="No Location Available"]
data$Project.Longitude[data$Mgmt_Unit=="No Location Available"]
runApp('GitHub/NPS_Project_Database/NPSDatabase')
jitter(rep(41.979736, 10), factor = 0.01)
data = readxl::read_xlsx("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase\\NPS_projects_draft_JB.xlsx")
colnames(data) = gsub(" ", ".", colnames(data))
data$Year.Awarded = paste0(as.character(data$Year.Awarded),"-01-01")
data$Year.Awarded = as.Date(data$Year.Awarded, format = "%Y-%m-%d")
location = na.omit(unique(data[,c("Project.Latitude","Project.Longitude")]))
location = wqTools::assignPolys("wmu_poly", columns = "Mgmt_Unit",data=location, lat = "Project.Latitude", long = "Project.Longitude")
data = merge(data, location, all.x = TRUE)
data$Mgmt_Unit = as.character(data$Mgmt_Unit)
data$Mgmt_Unit[data$Watershed=="Statewide"] = "Statewide"
data$Mgmt_Unit[is.na(data$Mgmt_Unit)] = "No Location Available"
data$Project.Latitude[data$Mgmt_Unit=="No Location Available"] = jitter(rep(41.979736, length(data$Project.Latitude[data$Mgmt_Unit=="No Location Available"])), factor = 0.01)
data$Project.Longitude[data$Mgmt_Unit=="No Location Available"] = jitter(rep(-114.014642, length(data$Project.Longitude[data$Mgmt_Unit=="No Location Available"])), factor = 0.01)
data$Project.Latitude[data$Mgmt_Unit=="Statewide"] = jitter(rep(39.419220, length(data$Project.Latitude[data$Mgmt_Unit=="Statewide"])), factor = 0.01)
data$Project.Longitude[data$Mgmt_Unit=="Statewide"] = jitter(rep(-111.950684, length(data$Project.Longitude[data$Mgmt_Unit=="Statewide"])), factor = 0.01)
data$Project.Type = as.factor(data$Project.Type)
View(data)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
type_pal = colorFactor("Spectral", data$Project.Type)
type_pall
type_pal
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
min(data$Project.Latitude)
View(data)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
View(data)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
pdat = data
labs <- lapply(seq(nrow(pdat)), function(i) {
paste0("Name: ",pdat[i,"Project.Title"],"<br>",
"Year Awarded: ",pdat[i, "Year.Awarded"],"<br>",
"Amount Awarded: $",pdat[i, "Amount.Awarded"])
})
View(labs)
library(htmltools)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
irTools::asmntDashboard()
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
View(pdat)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
is.na(pdat$Project.Title)
pdat$Project.Title[is.na(pdat$Project.Title)]
site_click = list()
site_click$id = "Delin Roundy Stream Bank"
site_click$lat = 37.9281
site_click$long = -112.4234
siteid=site_click$id
lat = unique(pdat[pdat$Project.Title == siteid,'Project.Latitude'])
lat = round(as.numeric(paste(lat[1,])[1]),4)
lat
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
shiny::runApp('GitHub/NPS_Project_Database/NPSDatabase')
rsconnect::deployApp("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase", account="udwq", appName="NPSTool")
shiny::runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
rsconnect::deployApp("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase", account="udwq", appName="NPSTool")
library(readxl)
library(shiny)
library(leaflet)
library(wqTools)
library(shinycssloaders)
library(shinyjs)
library(htmltools)
library(lubridate)
library(DT)
data = readxl::read_xlsx("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase\\NPS_projects_draft_JB.xlsx")
data = readxl::read_xlsx("C:\\Users\\ehinman\\Documents\\GitHub\\NPS_Project_Database\\NPSDatabase\\data\\NPS_projects_draft_JB.xlsx")
colnames(data) = gsub(" ", ".", colnames(data))
data$Year.Awarded = paste0(as.character(data$Year.Awarded),"-01-01")
data$Year.Awarded = as.Date(data$Year.Awarded, format = "%Y-%m-%d")
location = na.omit(unique(data[,c("Project.Latitude","Project.Longitude")]))
location = wqTools::assignPolys("wmu_poly", columns = "Mgmt_Unit",data=location, lat = "Project.Latitude", long = "Project.Longitude")
View(location)
wqTools::au_poly
location = wqTools::assignAUs("au_poly", columns = "AU_NAME", data = location, lat = "Project.Latitude", long = "Project.Longitude")
location = wqTools::assignPolys("au_poly", columns = "AU_NAME", data = location, lat = "Project.Latitude", long = "Project.Longitude")
View(location)
data = merge(data, location, all.x = TRUE)
data$Mgmt_Unit = as.character(data$Mgmt_Unit)
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
runApp('GitHub/NPS_Project_Database/NPSDatabase')
load("C:/Users/ehinman/Desktop/IR-2020_files/prelim_asmnts_withSLCO_v3.Rdata")
# 1. Set working directory
setwd("C:/Users/ehinman/Documents/GitHub/IR-2020")
load("irdata_wqp_raw.Rdata")
load("secondary_review_record_rejections.RData")
resultids_reject = as.character(unique(all_record_rejections$ResultIdentifier))
secondary_review_rejected_records = subset(irdata$merged_results, irdata$merged_results$ResultIdentifier%in%resultids_reject)
secondary_review_rejected_records$IR_SecondaryReview_FLAG = "REJECT"
secondary_review_rejected_records$IR_SecondaryReview_COMMENT = "Determined inappropriate for IR assessment due to data concerns contained in Appendix 3 of the IR Assessment Methods"
merged_results = subset(irdata$merged_results, !(irdata$merged_results$ResultIdentifier%in%resultids_reject))
devtools::install_github("utah-dwq/wqTools")
devtools::install_github("utah-dwq/irTools")
translation_wb='ir_translation_workbook_working_v13_eh - no IR_Fraction formula.xlsx'
merged_results_flagged=merged_results %>%
applyScreenTable(wb=translation_wb, sheetname="masterSiteTable", startRow=1, flag_col_name="IR_Site_FLAG", com_col_name="IR_Site_COMMENT")
rej_data=subset(merged_results_flagged, IR_Site_FLAG=='REJECT')
acc_data=subset(merged_results_flagged, IR_Site_FLAG=='ACCEPT')
(subset(acc_data, MonitoringLocationIdentifier=='UTAHDWQ_WQX-5916570' & CharacteristicName=='Magnesium'))
acc_data=acc_data%>%
applyScreenTable(wb=translation_wb, sheetname="activityMediaNameTable", startRow=1, flag_col_name="IR_ActMedia_FLAG", com_col_name="IR_ActMedia_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="labNameActivityTable", startRow=3, flag_col_name="IR_LabAct_FLAG", com_col_name="IR_LabAct_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="detConditionTable", startRow=3, flag_col_name="IR_DetCond_FLAG", com_col_name="IR_DetCond_COMMENT")
with(acc_data,{table(ActivityMediaName, IR_ActMedia_FLAG)})
rej_data_flag=subset(acc_data, IR_Site_FLAG=='REJECT' | IR_ActMedia_FLAG=='REJECT' | IR_LabAct_FLAG=='REJECT' | IR_DetCond_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, rej_data_flag)
acc_data=subset(acc_data, IR_Site_FLAG=='ACCEPT' & IR_ActMedia_FLAG=='ACCEPT' & (IR_LabAct_FLAG=='ACCEPT' |  IR_LabAct_FLAG=='REVIEW') & IR_DetCond_FLAG=='ACCEPT')
library(wqTools)
library(irTools)
library(magrittr)
translation_wb='ir_translation_workbook_working_v13_eh - no IR_Fraction formula.xlsx'
merged_results_flagged=merged_results %>%
applyScreenTable(wb=translation_wb, sheetname="masterSiteTable", startRow=1, flag_col_name="IR_Site_FLAG", com_col_name="IR_Site_COMMENT")
rej_data=subset(merged_results_flagged, IR_Site_FLAG=='REJECT')
acc_data=subset(merged_results_flagged, IR_Site_FLAG=='ACCEPT')
(subset(acc_data, MonitoringLocationIdentifier=='UTAHDWQ_WQX-5916570' & CharacteristicName=='Magnesium'))
acc_data=acc_data%>%
applyScreenTable(wb=translation_wb, sheetname="activityMediaNameTable", startRow=1, flag_col_name="IR_ActMedia_FLAG", com_col_name="IR_ActMedia_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="labNameActivityTable", startRow=3, flag_col_name="IR_LabAct_FLAG", com_col_name="IR_LabAct_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="detConditionTable", startRow=3, flag_col_name="IR_DetCond_FLAG", com_col_name="IR_DetCond_COMMENT")
with(acc_data,{table(ActivityMediaName, IR_ActMedia_FLAG)})
rej_data_flag=subset(acc_data, IR_Site_FLAG=='REJECT' | IR_ActMedia_FLAG=='REJECT' | IR_LabAct_FLAG=='REJECT' | IR_DetCond_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, rej_data_flag)
acc_data=subset(acc_data, IR_Site_FLAG=='ACCEPT' & IR_ActMedia_FLAG=='ACCEPT' & (IR_LabAct_FLAG=='ACCEPT' |  IR_LabAct_FLAG=='REVIEW') & IR_DetCond_FLAG=='ACCEPT')
rm(rej_data_flag)
rm(merged_results)
acc_data=fillMaskedValues(results=acc_data, detquantlim=irdata$detquantlim, translation_wb=translation_wb,
detLimitTypeTable_sheetname="detLimitTypeTable", detLimitTypeTable_startRow=3,
unitConvTable_sheetname="unitConvTable", unitConvTable_startRow=1, unitConvTable_startCol=1,
lql_fac=0.5, uql_fac=1)
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
acc_data=within(acc_data, {
ResultMeasure.MeasureUnitCode=ifelse(is.na(ResultMeasure.MeasureUnitCode) & !is.na(IR_Unit), as.character(IR_Unit), as.character(ResultMeasure.MeasureUnitCode))
IR_Unit_FLAG=ifelse(!is.na(ResultMeasure.MeasureUnitCode), 'ACCEPT', 'REJECT')
IR_Unit_Comment=ifelse(IR_Unit_FLAG=='ACCEPT', NA, 'No units available for data point')
})
table(acc_data$ResultMeasure.MeasureUnitCode)
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
any(acc_data$CharacteristicName =='Bis2-Chloroisopropy1Ether')
unit_rej_data=subset(acc_data, IR_Unit_FLAG!='ACCEPT')
rej_data=plyr::rbind.fill(rej_data, unit_rej_data)
acc_data=subset(acc_data, IR_Unit_FLAG=='ACCEPT')
rm(unit_rej_data)
acc_data=applyScreenTable(acc_data, wb=translation_wb, sheetname="paramTransTable", startRow=4, flag_col_name="IR_Parameter_FLAG", com_col_name="IR_Parameter_COMMENT")
table(acc_data$IR_Parameter_FLAG, exclude=NULL)
param_rej_data=subset(acc_data, IR_Parameter_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, param_rej_data)
acc_data=subset(acc_data, IR_Parameter_FLAG=='ACCEPT' | IR_Parameter_FLAG=='REVIEW')
rm(param_rej_data)
table(acc_data$ResultSampleFractionText, acc_data$IR_Fraction, exclude=NULL)
# dim(acc_data)
# dim(rej_data)
# dim(merged_results)
table(is.na(acc_data$CAS))
load("au_parameter_rejections_slco.RData")
au_param_rej$SLCo_flag = "REJECT"
au_param_rej$SLCo_comment = au_param_rej$Comment
au_param_rej = au_param_rej[,!names(au_param_rej)%in%c("Reviewer","Comment","ReviewDate")]
acc_slco_merge = merge(acc_data, au_param_rej, all.x = TRUE)
slco_rej_data = subset(acc_slco_merge, acc_slco_merge$SLCo_flag=="REJECT")
rej_data = plyr::rbind.fill(rej_data, slco_rej_data)
acc_data = subset(acc_slco_merge, is.na(acc_slco_merge$SLCo_flag))
acc_data = acc_data[,!names(acc_data)%in%c("SLCo_flag","SLCo_comment", "slco","dwq")]
dim(acc_data)[1]+dim(slco_rej_data)[1]==dim(acc_slco_merge)[1]
screened_data=rej_data
if(!(dim(rej_data)[1]+dim(acc_data)[1]==dim(merged_results_flagged)[1])){
warning("Rejected and accepted records do not match total record count before applying screen tables.")
}
rm(rej_data)
memory.limit(size=56000)
acc_data_criteria=assignCriteria(acc_data, crit_wb='IR_uses_standards_working_v6_eh.xlsx', crit_sheetname='criteria', ss_sheetname='ss_criteria',
crit_startRow = 3, ss_startRow = 4, rm_nocrit = TRUE, print = TRUE)
acc_data_nocrit = subset(acc_data, !(acc_data$ResultIdentifier%in%acc_data_criteria$ResultIdentifier))
acc_data_nocrit$IR_Criteria_FLAG = "NOT ASSESSED"
acc_data_nocrit$IR_Criteria_COMMENT = "No criteria to assess."
if(!(length(unique(acc_data$ResultIdentifier))-length(unique(acc_data_criteria$ResultIdentifier))==length(unique(acc_data_nocrit$ResultIdentifier)))){
warning("Record counts do not match before/after assigning criteria.")
}
prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v6_eh.xlsx", startRow_formulas=3)
objects(prepped_data)
length(unique(acc_data_criteria$ResultIdentifier)) #592766
length(unique(c(prepped_data$rej_data_reasons$ResultIdentifier, prepped_data$acc_data$ResultIdentifier))) #466437
rej_dataprep = prepped_data$rej_data_reasons
rej_dataprep$IR_DataPrep_FLAG = "REJECT"
names(rej_dataprep)[names(rej_dataprep)=="reason"]="IR_DataPrep_Comment"
all_rejected_records = plyr::rbind.fill(screened_data, rej_dataprep, secondary_review_rejected_records, acc_data_nocrit)
rm(screened_data, rej_dataprep, secondary_review_rejected_records, acc_data_nocrit)
ecoli_dat_assess = prepped_data$ecoli
orig_rec = dim(ecoli_dat_assess)[1]
## Remove 2010 data since it only contains October
ecoli_dat_notassess = ecoli_dat_assess[grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),] # ADD TO REJECTED DATA
rej_rec = dim(ecoli_dat_notassess)[1]
ecoli_dat_notassess$IR_Cat = "Not Assessed - Out of POR"
ecoli_dat_notassess$ActivityStartDate = as.character(ecoli_dat_notassess$ActivityStartDate)
ecoli_dat_assess = ecoli_dat_assess[!grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),]
ecoli_dat_assess = droplevels(ecoli_dat_assess)
new_rec = dim(ecoli_dat_assess)[1]
new_rec+rej_rec==orig_rec
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="OD",2420,ecoli_dat_assess$IR_Value)
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="ND",1,ecoli_dat_assess$IR_Value)
assessed_ecoli = assessEColi(data = ecoli_dat_assess)
assessed_ecoli$non_assessed_data$ActivityStartDate = as.character(assessed_ecoli$non_assessed_data$ActivityStartDate)
# Combine all rejected data
assessed_ecoli$non_assessed_data = plyr::rbind.fill(assessed_ecoli$non_assessed_data, ecoli_dat_notassess)
length(unique(assessed_ecoli$assessed_data$IR_MLID)) # 815
length(unique(assessed_ecoli$dailyaggregated_data$IR_MLID)) # 815
length(unique(assessed_ecoli$ecoli_allscenario_asmnts$IR_MLID)) # 815
length(unique(assessed_ecoli$ecoli_scenario_rollup$IR_MLID)) # 815
length(unique(assessed_ecoli$ecoli_mlid_asmnts$IR_MLID)) # 815
mlids = unique(assessed_ecoli$ecoli_scenario_rollup$IR_MLID)
mlids1 = unique(assessed_ecoli$ecoli_mlid_asmnts$IR_MLID)
dropped_mlids = mlids[!mlids%in%mlids1]
# order in sheet by importance rather than by creation
reversenams = names(assessed_ecoli)
reversenams = rev(reversenams)
assessed_ecoli2 = assessed_ecoli[reversenams]
assessed_ecoli2$raw_data = NULL
require(openxlsx)
write.xlsx(assessed_ecoli2, file = "ecoli_assessed_review_v4.xlsx")
rm(mlids, mlids1, reversenams,dropped_mlids, assessed_ecoli2)
lake_profs_assessed=as.data.frame(readxl::read_excel('lake_profile_asmnts.xlsx', 'lake_profile_asmnts'))
# lake_profs_assessed=comb_asmnt_au
names(lake_profs_assessed)[names(lake_profs_assessed)=='au_param_Cat2020']='IR_Cat'
table(lake_profs_assessed$R3172ParameterName)
lake_profs_assessed=within(lake_profs_assessed, {
R3172ParameterName=as.character(R3172ParameterName)
R3172ParameterName[R3172ParameterName=='Dissolved oxygen (DO)']='Minimum Dissolved Oxygen'
R3172ParameterName[R3172ParameterName=='Temperature, water']='Max. Temperature'
})
prelim_asmnts=plyr::rbind.fill(conventionals_assessed,lake_tds_assessed,ss_mean_tds_assessed,toxics_assessed, assessed_ecoli$ecoli_mlid_asmnts,lake_profs_assessed[,!names(lake_profs_assessed) %in% c('PrevCat','au_param_Cat2020','pot_delist','new_listing')])
group_vars = c("IR_MLID", "IR_MLNAME", "IR_Lat", "IR_Long", "ASSESS_ID", "AU_NAME", "BeneficialUse", "BEN_CLASS",
"CAS", "IRParameterName", "TargetFraction", "R3172ParameterName", "ParameterGroupName",
"AsmntAggPeriod","AsmntAggPeriodUnit", "TableNumber","TableDescription","CriterionLabel","ParameterQualifier","SSC_MLID", "AsmntAggFun")
toxics_exc=countExceedances(prepped_data$toxics, group_vars = group_vars)
toxics_assessed=assessExcCounts(toxics_exc, min_n=4, max_exc_count=1, max_exc_count_id=0)
with(toxics_assessed, {table(R3172ParameterName, IR_Cat)})
with(toxics_assessed, {table(ParameterGroupName, IR_Cat)})
table(droplevels(prepped_data$radium$CharacteristicName))
table(prepped_data$radium$IR_DetCond)
radium_cast=reshape2::dcast(prepped_data$radium, IR_MLID+IR_MLNAME+IR_Lat+IR_Long+ASSESS_ID+AU_NAME+BeneficialUse+BEN_CLASS+CAS+IRParameterName+TargetFraction+R3172ParameterName+
ParameterGroupName+AsmntAggPeriod+AsmntAggPeriodUnit+TableDescription+CriterionLabel+ParameterQualifier+SSC_MLID+SSC_StartMon+SSC_EndMon+AsmntAggFun+ActivityStartDate~CharacteristicName, value.var='IR_Value')
any(!is.na(radium_cast$`Radium-226`) & !is.na(radium_cast$`Radium-228`))
conventionals_exc=countExceedances(prepped_data$conventionals, group_vars = group_vars)
conventionals_assessed=assessExcCounts(conventionals_exc, min_n=10, max_exc_pct=10, max_exc_count_id=1)
with(conventionals_assessed, {table(R3172ParameterName, IR_Cat)})
conventionals_assessed=subset(conventionals_assessed, R3172ParameterName!='Turbidity Increase' & !(R3172ParameterName=='Minimum Dissolved Oxygen' & (AsmntAggPeriod==1 | AsmntAggPeriod==7)))
with(conventionals_assessed, {table(droplevels(R3172ParameterName), IR_Cat)})
lake_tds_exc=countExceedances(prepped_data$lakes_tds, group_vars = group_vars)
lake_tds_assessed=assessExcCounts(lake_tds_exc, min_n=2, max_exc_pct=10, max_exc_pct_id=0)
with(lake_tds_assessed, {table(R3172ParameterName, IR_Cat)})
table(droplevels(prepped_data$agg_tds$ASSESS_ID), droplevels(prepped_data$agg_tds$AU_NAME))
mean(subset(prepped_data$agg_tds, NumericCriterion==4700)$IR_Value)
mean(subset(prepped_data$agg_tds, NumericCriterion==3800)$IR_Value)
ss_mean_tds_exc=countExceedances(prepped_data$agg_tds, group_vars = group_vars)
ss_mean_tds_assessed=assessExcCounts(ss_mean_tds_exc, min_n=10, max_exc_pct=50, max_exc_count_id=1)
ss_mean_tds_assessed
lake_profs_assessed=as.data.frame(readxl::read_excel('lake_profile_asmnts.xlsx', 'lake_profile_asmnts'))
# lake_profs_assessed=comb_asmnt_au
names(lake_profs_assessed)[names(lake_profs_assessed)=='au_param_Cat2020']='IR_Cat'
table(lake_profs_assessed$R3172ParameterName)
lake_profs_assessed=within(lake_profs_assessed, {
R3172ParameterName=as.character(R3172ParameterName)
R3172ParameterName[R3172ParameterName=='Dissolved oxygen (DO)']='Minimum Dissolved Oxygen'
R3172ParameterName[R3172ParameterName=='Temperature, water']='Max. Temperature'
})
prelim_asmnts=plyr::rbind.fill(conventionals_assessed,lake_tds_assessed,ss_mean_tds_assessed,toxics_assessed, assessed_ecoli$ecoli_mlid_asmnts,lake_profs_assessed[,!names(lake_profs_assessed) %in% c('PrevCat','au_param_Cat2020','pot_delist','new_listing')])
reject = data.frame(IR_MLID="UTAHDWQ_WQX-5913210",R3172ParameterName="Minimum Dissolved Oxygen",Remove = "1")
prelim_asmnts = merge(prelim_asmnts, reject, all.x = TRUE)
prelim_asmnts = subset(prelim_asmnts, is.na(prelim_asmnts$Remove))
prelim_asmnts = prelim_asmnts[,!names(prelim_asmnts)%in%c("Remove")]
load("external_assessments_v2.RData") # remember to change if any changes occur to external assessments
prelim_asmnts=plyr::rbind.fill(prelim_asmnts, external_asmnts)
prelim_asmnts$pol_ind=ifelse(prelim_asmnts$ParameterGroupName=='POLLUTION INDICATORS' | prelim_asmnts$R3172ParameterName=='Lakes tier II', 'Y', 'N')
prelim_asmnts$pol_ind[is.na(prelim_asmnts$pol_ind)]='N'
any(is.na(prelim_asmnts$IR_Cat))
prelim_asmnts = prelim_asmnts[,!names(prelim_asmnts)%in%c("Mgmt_Unit","AU_Type")]
wmus=unique(acc_data_criteria[,c('ASSESS_ID','AU_Type','Mgmt_Unit')])
dim(prelim_asmnts)
prelim_asmnts=merge(prelim_asmnts, wmus, all.x=T)
dim(prelim_asmnts)
prelim_asmnts$Mgmt_Unit[prelim_asmnts$BeneficialUse=='5A']='Great Salt Lake'
any(is.na(prelim_asmnts$Mgmt_Unit))
prelim_asmnts$lake=ifelse(prelim_asmnts$AU_Type=='Reservoir/Lake' | prelim_asmnts$BeneficialUse=='5A', 'Y', 'N')
table(prelim_asmnts$lake, exclude=NULL)
compiled_data = composeExport(prepped_data = prepped_data, toxics_assessed = toxics_assessed, conventionals_assessed = conventionals_assessed, create_workbooks = FALSE, include_rejected = FALSE, params = params)
assessed_dat_crit_flat = prepped_data$acc_data
assessed_dat_allcols = subset(acc_data, acc_data$ResultIdentifier%in%unique(assessed_dat_crit_flat$ResultIdentifier))
lake_assessments = list(lake_tds_assessed,lake_tds_exc,lake_profs_assessed)
site_specific_tds_assessments = list(ss_mean_tds_assessed, ss_mean_tds_exc)
toxics_and_conventionals_assessments = list(conventionals_assessed, conventionals_exc, toxics_assessed, toxics_exc)
save(assessed_dat_crit_flat,assessed_dat_allcols,group_vars, lake_assessments, site_specific_tds_assessments, toxics_and_conventionals_assessments, prepped_data, assessed_ecoli, prelim_asmnts, compiled_data, file='prelim_asmnts_data_v3.Rdata')
# Remove Pollution Indicators
pi_recs = subset(prelim_asmnts, prelim_asmnts$ParameterGroupName=="POLLUTION INDICATORS")
pi_recs$pi = 1
asmnts_no_pi = merge(prelim_asmnts, pi_recs, all.x=TRUE)
asmnts_no_pi = subset(asmnts_no_pi, is.na(asmnts_no_pi$pi))
au_bu = unique(asmnts_no_pi[,c("BEN_CLASS","ASSESS_ID")])
au_bu = au_bu[!is.na(au_bu$BEN_CLASS),]
asmnts_no_pi = asmnts_no_pi[,!names(asmnts_no_pi)%in%c("BEN_CLASS")]
asmnts_no_pi = merge(asmnts_no_pi, au_bu, all.x = TRUE)
# Roll up to overall AU to find FS AU's
au_asmnts = irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME"), cat_var="IR_Cat", expand_uses=F, print=F)
fs_aus = subset(au_asmnts$ASSESS_ID, au_asmnts$AssessCat=="FS")
fs_prelim = subset(asmnts_no_pi, asmnts_no_pi$ASSESS_ID%in%fs_aus)
# Expand uses for FS cats to find cat 2's
fs_au_asmnts = irTools::rollUp(list(fs_prelim), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse"), cat_var="IR_Cat", expand_uses=T, print=F)
# Au's with NA's
nei_aus = subset(fs_au_asmnts, fs_au_asmnts$AssessCat=="NA")
nei_auids = unique(nei_aus$ASSESS_ID)
au_use_asmnts = irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse", "Mgmt_Unit"), cat_var="IR_Cat", expand_uses=T, print=F)
# Combine overall cat and use cats
names(au_asmnts)[names(au_asmnts)=="AssessCat"] <- "DWQ_AU_Cat"
names(au_use_asmnts)[names(au_use_asmnts)=="AssessCat"] <- "DWQ_AU_Use_Cat"
au_use_cats = merge(au_use_asmnts, au_asmnts, all = TRUE)
length(au_use_cats$DWQ_AU_Use_Cat[is.na(au_use_cats$DWQ_AU_Use_Cat)])
length(au_use_cats$DWQ_AU_Cat[is.na(au_use_cats$DWQ_AU_Cat)])
# Add DWQ numeric category
au_use_cats = within(au_use_cats,{
DWQ_AU_NumCat = NA
DWQ_AU_NumCat[DWQ_AU_Cat=="NS"] = 5
DWQ_AU_NumCat[DWQ_AU_Cat=="IDEX"|DWQ_AU_Cat=="IDNE"] = 3
DWQ_AU_NumCat[DWQ_AU_Cat=="FS"] = 1
})
au_use_cats$DWQ_AU_NumCat = ifelse(au_use_cats$ASSESS_ID%in%nei_auids, "2", au_use_cats$DWQ_AU_NumCat)
site_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME", "IR_Lat","IR_Long","Mgmt_Unit"), cat_var="IR_Cat", expand_uses=F, print=F)
names(site_asmnts)[names(site_asmnts)=="AssessCat"]="site_asmnt"
# AU assessments (no uses)
au_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME"), cat_var="IR_Cat", expand_uses=F, print=F)
names(au_asmnts)[names(au_asmnts)=="AssessCat"]="au_asmnt"
site_au_asmnts=merge(site_asmnts, au_asmnts, all=T)
# AU-site-param assessments
param_asmnts= irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
names(param_asmnts)[names(param_asmnts)=="AssessCat"]="param_asmnt"
# Combine all assessments
site_au_param_asmnts = merge(site_au_asmnts, param_asmnts, all = TRUE)
# Pollution Indicator Assessments
pi_asmnts = subset(prelim_asmnts, prelim_asmnts$ParameterGroupName=="POLLUTION INDICATORS")
pi_au_param_asmnts = irTools::rollUp(list(pi_asmnts), group_vars = c("ASSESS_ID","AU_NAME","R3172ParameterName"), cat_var = "AssessCat", expand_uses = F, print = F)
write.csv(file="site_au_param_asmnts_merged_v6.csv", site_au_param_asmnts, row.names=F)
site_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","BeneficialUse","ASSESS_ID","AU_NAME", "IR_Lat","IR_Long","Mgmt_Unit"), cat_var="IR_Cat", expand_uses=T, print=F)
names(site_asmnts)[names(site_asmnts)=="AssessCat"]="site_asmnt"
# AU assessments (no uses)
au_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse"), cat_var="IR_Cat", expand_uses=T, print=F)
names(au_asmnts)[names(au_asmnts)=="AssessCat"]="au_asmnt"
site_au_asmnts=merge(site_asmnts, au_asmnts, all=T)
# AU-site-param assessments
param_asmnts= irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME","BeneficialUse","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
names(param_asmnts)[names(param_asmnts)=="AssessCat"]="param_asmnt"
# Combine all assessments
site_au_param_asmnts = merge(site_au_asmnts, param_asmnts, all = TRUE)
write.csv(file="USE_site_au_param_asmnts_merged.csv", site_au_param_asmnts, row.names=F)
site_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","BeneficialUse","ASSESS_ID","AU_NAME", "IR_Lat","IR_Long","Mgmt_Unit"), cat_var="IR_Cat", expand_uses=T, print=F)
names(site_asmnts)[names(site_asmnts)=="AssessCat"]="site_asmnt"
names(site_asmnts)[names(site_asmnts)=="BeneficialUse"]="site_bu"
# AU assessments (no uses)
au_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse"), cat_var="IR_Cat", expand_uses=T, print=F)
names(au_asmnts)[names(au_asmnts)=="AssessCat"]="au_asmnt"
names(au_asmnts)[names(au_asmnts)=="BeneficialUse"]="au_bu"
site_au_asmnts=merge(site_asmnts, au_asmnts, all=T)
# AU-site-param assessments
param_asmnts= irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME","BeneficialUse","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
names(param_asmnts)[names(param_asmnts)=="AssessCat"]="param_asmnt"
names(param_asmnts)[names(param_asmnts)=="BeneficialUse"]="param_bu"
# Combine all assessments
site_au_param_asmnts = merge(site_au_asmnts, param_asmnts, all = TRUE)
write.csv(file="USE_site_au_param_asmnts_merged.csv", site_au_param_asmnts, row.names=F)
pi_recs = subset(prelim_asmnts, prelim_asmnts$ParameterGroupName=="POLLUTION INDICATORS")
pi_recs$pi = 1
asmnts_no_pi = merge(prelim_asmnts, pi_recs, all.x=TRUE)
asmnts_no_pi = subset(asmnts_no_pi, is.na(asmnts_no_pi$pi))
au_bu = unique(asmnts_no_pi[,c("BEN_CLASS","ASSESS_ID")])
au_bu = au_bu[!is.na(au_bu$BEN_CLASS),]
asmnts_no_pi = asmnts_no_pi[,!names(asmnts_no_pi)%in%c("BEN_CLASS")]
asmnts_no_pi = merge(asmnts_no_pi, au_bu, all.x = TRUE)
# Roll up to overall AU to find FS AU's
au_asmnts = irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME"), cat_var="IR_Cat", expand_uses=F, print=F)
fs_aus = subset(au_asmnts$ASSESS_ID, au_asmnts$AssessCat=="FS")
fs_prelim = subset(asmnts_no_pi, asmnts_no_pi$ASSESS_ID%in%fs_aus)
# Expand uses for FS cats to find cat 2's
fs_au_asmnts = irTools::rollUp(list(fs_prelim), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse"), cat_var="IR_Cat", expand_uses=T, print=F)
length(nei_auids)
# Au's with NA's
nei_aus = subset(fs_au_asmnts, fs_au_asmnts$AssessCat=="NA"|fs_au_asmnts$AssessCat=="IDNE")
nei_auids = unique(nei_aus$ASSESS_ID)
length(nei_auids)
au_use_asmnts = irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse", "Mgmt_Unit"), cat_var="IR_Cat", expand_uses=T, print=F)
# Combine overall cat and use cats
names(au_asmnts)[names(au_asmnts)=="AssessCat"] <- "DWQ_AU_Cat"
names(au_use_asmnts)[names(au_use_asmnts)=="AssessCat"] <- "DWQ_AU_Use_Cat"
au_use_cats = merge(au_use_asmnts, au_asmnts, all = TRUE)
length(au_use_cats$DWQ_AU_Use_Cat[is.na(au_use_cats$DWQ_AU_Use_Cat)])
length(au_use_cats$DWQ_AU_Cat[is.na(au_use_cats$DWQ_AU_Cat)])
# Add DWQ numeric category
au_use_cats = within(au_use_cats,{
DWQ_AU_NumCat = NA
DWQ_AU_NumCat[DWQ_AU_Cat=="NS"] = 5
DWQ_AU_NumCat[DWQ_AU_Cat=="IDEX"|DWQ_AU_Cat=="IDNE"] = 3
DWQ_AU_NumCat[DWQ_AU_Cat=="FS"] = 1
})
au_use_cats$DWQ_AU_NumCat = ifelse(au_use_cats$ASSESS_ID%in%nei_auids, "2", au_use_cats$DWQ_AU_NumCat)
library(tidyr)
library(dplyr)
load("tmdls_2020_ir.Rdata")
tmdls = unique(tmdls[,c("Assessment Unit ID","TMDL ID","TMDL Pollutant")])
names(tmdls)[names(tmdls)=="Assessment Unit ID"] <- "ASSESS_ID"
tmdls_wide = tmdls%>%pivot_wider(id_cols = c(ASSESS_ID, `TMDL ID`), names_from = `TMDL Pollutant`, values_from = `TMDL Pollutant`)
paste2 <- function(x){
y = x[3:length(x)]
y = y[!is.na(y)]
z = paste(y, collapse=",")
return(z)
}
tmdls_wide$Pollutant = apply(tmdls_wide,1,paste2)
tmdls_wide = tmdls_wide[,c("ASSESS_ID","TMDL ID","Pollutant")]
au_mgmt = unique(prelim_asmnts[,c("ASSESS_ID","AU_NAME","Mgmt_Unit")])
tmdls_wide = merge(tmdls_wide, au_mgmt, all.x = TRUE)
b305 = merge(au_use_cats, tmdls_wide, all = TRUE)
b305$DWQ_AU_NumCat = ifelse(!is.na(b305$`TMDL ID`)&(b305$DWQ_AU_Cat%in%c("NS","IDEX")),"4A",b305$DWQ_AU_NumCat)
ns_param_asmnts = irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse", "Mgmt_Unit","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
au_mgmt = unique(ns_param_asmnts[,c("ASSESS_ID","Mgmt_Unit")])
ns_param_asmnts = subset(ns_param_asmnts, ns_param_asmnts$AssessCat=="NS")
#### HHC
hhc_ns = subset(prelim_asmnts, prelim_asmnts$TableDescription=="LIST OF HUMAN HEALTH CRITERIA (CONSUMPTION)"&prelim_asmnts$IR_Cat=="NS")
ns_uses_wide = unique(ns_param_asmnts[,c("ASSESS_ID","AU_NAME","BeneficialUse")])
ns_uses_wide = ns_uses_wide%>%pivot_wider(id_cols = c(ASSESS_ID, AU_NAME), names_from = BeneficialUse, values_from = BeneficialUse)
ns_uses_wide$Impaired_Uses = apply(ns_uses_wide,1,paste2)
ns_uses_wide = ns_uses_wide[,c("ASSESS_ID","AU_NAME","Impaired_Uses")]
ns_params_wide = unique(ns_param_asmnts[,c("ASSESS_ID","AU_NAME","R3172ParameterName")])
ns_params_wide = ns_params_wide%>%pivot_wider(id_cols = c(ASSESS_ID, AU_NAME), names_from = R3172ParameterName, values_from = R3172ParameterName)
ns_params_wide$Impaired_Parameter = apply(ns_params_wide,1,paste2)
ns_params_wide = ns_params_wide[,c("ASSESS_ID","AU_NAME","Impaired_Parameter")]
d303 = merge(ns_uses_wide, ns_params_wide, all= TRUE)
d303 = merge(d303, au_mgmt, all = TRUE)
?write.xlsx
writexl::write_xlsx(list("305b" = b305,"303d" = d303, "4as" = tmdls_wide),
path = '305b_303d_tmdls_v2.xlsx', format_headers=F, col_names=T)
site_au_use_param_asmnts= irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME","BeneficialUse","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
names(site_au_use_param_asmnts)[names(site_au_use_param_asmnts)=="AssessCat"]="param_asmnt"
au_use_site_param_asmts = merge(au_use_asmnts, site_au_use_param_asmnts, all = TRUE)
write.csv(file="USE_site_au_param_asmnts_merged.csv", au_use_site_param_asmts, row.names=F)
au_use_asmnts=irTools::rollUp(list(asmnts_no_pi), group_vars=c("ASSESS_ID","AU_NAME","BeneficialUse"), cat_var="IR_Cat", expand_uses=T, print=F)
names(au_asmnts)[names(au_asmnts)=="AssessCat"]="au_asmnt"
site_au_use_param_asmnts= irTools::rollUp(list(asmnts_no_pi), group_vars=c("IR_MLID","IR_MLNAME","ASSESS_ID","AU_NAME","BeneficialUse","R3172ParameterName"), cat_var="IR_Cat", expand_uses=F, print=F)
names(site_au_use_param_asmnts)[names(site_au_use_param_asmnts)=="AssessCat"]="param_asmnt"
au_use_site_param_asmts = merge(au_use_asmnts, site_au_use_param_asmnts, all = TRUE)
write.csv(file="USE_site_au_param_asmnts_merged.csv", au_use_site_param_asmts, row.names=F)
asmnt
irTools::asmntDashboard()
