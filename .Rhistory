toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
View(toxics)
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature,.water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
suppressWarnings({
NumericCriterion=wqTools::facToNum(NumericCriterion)
})
NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature,.water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
suppressWarnings({
NumericCriterion=wqTools::facToNum(NumericCriterion)
})
NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
View(toxics)
colnames(toxics)
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature..water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
suppressWarnings({
NumericCriterion=wqTools::facToNum(NumericCriterion)
})
NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
View(toxics)
View(toxics)
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
View(toxics)
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature..water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
suppressWarnings({
NumericCriterion=wqTools::facToNum(NumericCriterion)
})
NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature..water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
# suppressWarnings({
#   NumericCriterion=wqTools::facToNum(NumericCriterion)
#
# })
#NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
View(toxics)
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF
CF = toxics$CF
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CF
CF = toxics$CF
CF
CF[!is.na(CF)]
CF
CF[is.na(CF)]
str(CF)
levels(CF)
toxics$CF[toxics$CF==""] = NA
toxics$CF
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature..water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
# suppressWarnings({
#   NumericCriterion=wqTools::facToNum(NumericCriterion)
#
# })
#NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
toxics
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF[toxics$CF==""] = NA
CF = toxics$CF
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CF
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF[toxics$CF==""] = NA
CF = toxics$CF
CF
CF[!is.na(CF)]
paste0("(",CF[!is.na(CF)],")")
CriterionFormula = toxics$CriterionFormula
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF[toxics$CF==""] = NA
CF = toxics$CF
CriterionFormula = toxics$CriterionFormula
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CF = toxics$CF
CF
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF[toxics$CF==""] = NA
CF = toxics$CF
CriterionFormula = toxics$CriterionFormula
CF[!is.na(CF)]
CF = as.character(toxics$CF)
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
toxics = read.csv("P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check.csv")
toxics$CF[toxics$CF==""] = NA
toxics$CF = as.character(toxics$CF)
toxics=within(toxics, {
CF[!is.na(CF)]=paste0("(",CF[!is.na(CF)],")")
CriterionFormula=gsub("CF * ","",CriterionFormula, fixed=TRUE)
CriterionFormula[!is.na(CF)]=paste0("(",CriterionFormula[!is.na(CF)],")")
CriterionFormula[!is.na(CF)]=paste(CF[!is.na(CF)], "*", CriterionFormula[!is.na(CF)])
CriterionFormula=gsub("MIN", "min", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("MAX", "max", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("ln", "log", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(") (", ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub(")(",  ")*(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("(e(",  "(exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("e(",  "exp(", CriterionFormula, fixed=TRUE)
CriterionFormula=gsub("IFELSE",  "ifelse", CriterionFormula, fixed=TRUE)
CriterionFormula=stringr::str_replace_all(CriterionFormula, "hardness", as.character(hardness))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "min_pH", as.character(`cf_min_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "max_pH", as.character(`cf_max_pH_pH.units`))
CriterionFormula=stringr::str_replace_all(CriterionFormula, "T", as.character(`cf_max_Temperature..water_deg.C`))
CalculatedCrit=sapply(CriterionFormula, function(x) eval(parse(text=x)))
# suppressWarnings({
#   NumericCriterion=wqTools::facToNum(NumericCriterion)
#
# })
#NumericCriterion[calc=="calc"]=CalculatedCrit[calc=="calc"]
})
View(toxics)
write.csv(toxics, "P:\\WQ\\Integrated Report\\IR_2020\\standards_UAC_R3172\\cf_equations_check_calc.csv", row.names = FALSE)
0.8473*log(0.986)
0.8473*log(0.986)+0.884
exp(0.8473*log(0.986)+0.884)
exp(0.8473*log(0.986)+0.884)*0.986
exp(0.8473*log(100)+0.884)*0.986
exp(0.8473*log(100)+0.884)*0.978
(1.101672 - log(100)*(0.041838)) * (exp(0.7977*log(100)-3.909))
