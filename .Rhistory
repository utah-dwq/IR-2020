prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v4_ef.xlsx", startRow_formulas=3)
table(acc_data_criteria$R3172ParameterName)
memory.size()
memory.limit()
memory.profile()
memory.limit(TRUE)
memory.size(TRUE)
memory.limit(size=56000)
prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v4_ef.xlsx", startRow_formulas=3)
memory.limit(size=56000)
acc_data_criteria1=assignCriteria(acc_data, crit_wb='IR_uses_standards_working_v4_ef.xlsx', crit_sheetname='criteria', ss_sheetname='ss_criteria',
crit_startRow = 3, ss_startRow = 4, rm_nocrit = TRUE, print = TRUE)
setwd('P:/WQ/Integrated Report/IR_2020/2020-IR-assessments/assessment')
awqms_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/AWQMS_rejections_RSP_v2.xlsx', 'record-reviews'))
blmmoab_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/BLM_MOAB_DO_rejections.xlsx', 'record-reviews'))
crazytempphdo_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/crazy_ph_temp_do_values_rejection_template_V2.xlsx', 'record-reviews'))
flowrev_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/flow_review_rejections_by_resultidentifier_v2.xlsx', 'record-reviews'))
labactcomment_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/records_to_reject_lab_activity_comments.xlsx', 'record-reviews'))
secondaryrev_rejections = as.data.frame(readxl::read_excel('08_secondary_reviews/COMPILED REJECTIONS/rejections_secondary_reviews.xlsx', 'record-reviews'))
secondaryrev_rejections$ActivityStartDate[4] = "2018-05-29"
secondaryrev_rejections$ActivityStartDate = as.POSIXct(secondaryrev_rejections$ActivityStartDate)
all_record_rejections = plyr::rbind.fill(awqms_rejections, blmmoab_rejections, crazytempphdo_rejections, flowrev_rejections, labactcomment_rejections, secondaryrev_rejections)
setwd("C:\\Users\\ehinman\\Documents\\GitHub\\IR-2020")
save(all_record_rejections, file = "secondary_review_record_rejections.RData")
load("irdata_wqp_raw.Rdata")
load("secondary_review_record_rejections.RData")
resultids_reject = as.character(unique(all_record_rejections$ResultIdentifier))
merged_results = subset(irdata$merged_results, !(irdata$merged_results$ResultIdentifier%in%resultids_reject))
translation_wb='ir_translation_workbook_working_v13_eh - no IR_Fraction formula.xlsx'
merged_results_flagged=merged_results %>%
applyScreenTable(wb=translation_wb, sheetname="masterSiteTable", startRow=1, flag_col_name="IR_Site_FLAG", com_col_name="IR_Site_COMMENT")
rej_data=subset(merged_results_flagged, IR_Site_FLAG=='REJECT')
acc_data=subset(merged_results_flagged, IR_Site_FLAG=='ACCEPT')
(subset(acc_data, MonitoringLocationIdentifier=='UTAHDWQ_WQX-5916570' & CharacteristicName=='Magnesium'))
acc_data=acc_data%>%
applyScreenTable(wb=translation_wb, sheetname="activityMediaNameTable", startRow=1, flag_col_name="IR_ActMedia_FLAG", com_col_name="IR_ActMedia_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="labNameActivityTable", startRow=3, flag_col_name="IR_LabAct_FLAG", com_col_name="IR_LabAct_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="detConditionTable", startRow=3, flag_col_name="IR_DetCond_FLAG", com_col_name="IR_DetCond_COMMENT")
with(acc_data,{table(ActivityMediaName, IR_ActMedia_FLAG)})
rej_data_flag=subset(acc_data, IR_Site_FLAG=='REJECT' | IR_ActMedia_FLAG=='REJECT' | IR_LabAct_FLAG=='REJECT' | IR_DetCond_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, rej_data_flag)
acc_data=subset(acc_data, IR_Site_FLAG=='ACCEPT' & IR_ActMedia_FLAG=='ACCEPT' & (IR_LabAct_FLAG=='ACCEPT' |  IR_LabAct_FLAG=='REVIEW') & IR_DetCond_FLAG=='ACCEPT')
rm(rej_data_flag)
# COUNT CHECK
dim(merged_results)[1]==dim(merged_results_flagged)[1]
dim(acc_data)[1]+dim(rej_data)[1]==dim(merged_results_flagged)[1]
acc_data=fillMaskedValues(results=acc_data, detquantlim=irdata$detquantlim, translation_wb=translation_wb,
detLimitTypeTable_sheetname="detLimitTypeTable", detLimitTypeTable_startRow=3,
unitConvTable_sheetname="unitConvTable", unitConvTable_startRow=1, unitConvTable_startCol=1,
lql_fac=0.5, uql_fac=1)
dim(acc_data)[1]
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
acc_data=within(acc_data, {
ResultMeasure.MeasureUnitCode=ifelse(is.na(ResultMeasure.MeasureUnitCode) & !is.na(IR_Unit), as.character(IR_Unit), as.character(ResultMeasure.MeasureUnitCode))
IR_Unit_FLAG=ifelse(!is.na(ResultMeasure.MeasureUnitCode), 'ACCEPT', 'REJECT')
IR_Unit_Comment=ifelse(IR_Unit_FLAG=='ACCEPT', NA, 'No units available for data point')
})
table(acc_data$ResultMeasure.MeasureUnitCode)
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
any(acc_data$CharacteristicName =='Bis2-Chloroisopropy1Ether')
unit_rej_data=subset(acc_data, IR_Unit_FLAG!='ACCEPT')
rej_data=plyr::rbind.fill(rej_data, unit_rej_data)
acc_data=subset(acc_data, IR_Unit_FLAG=='ACCEPT')
rm(unit_rej_data)
# COUNT CHECK
dim(rej_data)[1]+dim(acc_data)[1]==dim(merged_results_flagged)[1]
acc_data=applyScreenTable(acc_data, wb=translation_wb, sheetname="paramTransTable", startRow=4, flag_col_name="IR_Parameter_FLAG", com_col_name="IR_Parameter_COMMENT")
table(acc_data$IR_Parameter_FLAG, exclude=NULL)
param_rej_data=subset(acc_data, IR_Parameter_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, param_rej_data)
acc_data=subset(acc_data, IR_Parameter_FLAG=='ACCEPT' | IR_Parameter_FLAG=='REVIEW')
rm(param_rej_data)
table(acc_data$ResultSampleFractionText, acc_data$IR_Fraction, exclude=NULL)
# dim(acc_data)
# dim(rej_data)
# dim(merged_results)
acc_data=subset(acc_data, IR_Unit_FLAG=='ACCEPT')
table(is.na(acc_data$CAS))
screened_data=rej_data
# COUNT CHECK
dim(rej_data)[1]+dim(acc_data)[1]==dim(merged_results_flagged)[1]
rm(nr,nr_sub,nr_na,irdata,merged_results,slcodata,rej_data)
memory.limit(size=56000)
acc_data_criteria=assignCriteria(acc_data, crit_wb='IR_uses_standards_working_v4_ef.xlsx', crit_sheetname='criteria', ss_sheetname='ss_criteria',
crit_startRow = 3, ss_startRow = 4, rm_nocrit = TRUE, print = TRUE)
acc_data_nocrit = subset(acc_data, !(acc_data$ResultIdentifier%in%acc_data_criteria$ResultIdentifier))
# COUNT CHECK
length(unique(acc_data$ResultIdentifier))-length(unique(acc_data_criteria$ResultIdentifier))==length(unique(acc_data_nocrit$ResultIdentifier))
memory.limit(size=56000)
prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v4_ef.xlsx", startRow_formulas=3)
objects(prepped_data)
group_vars = c("IR_MLID", "IR_MLNAME", "IR_Lat", "IR_Long", "ASSESS_ID", "AU_NAME", "BeneficialUse", "BEN_CLASS",
"CAS", "IRParameterName", "TargetFraction", "R3172ParameterName", "ParameterGroupName",
"AsmntAggPeriod","AsmntAggPeriodUnit", "TableNumber","TableDescription","CriterionLabel","ParameterQualifier","SSC_MLID", "AsmntAggFun")
toxics_exc=countExceedances(prepped_data$toxics, group_vars = group_vars)
toxics_assessed=assessExcCounts(toxics_exc, min_n=4, max_exc_count=1, max_exc_count_id=0)
with(toxics_assessed, {table(R3172ParameterName, IR_Cat)})
with(toxics_assessed, {table(ParameterGroupName, IR_Cat)})
table(droplevels(prepped_data$radium$CharacteristicName))
table(prepped_data$radium$IR_DetCond)
radium_cast=reshape2::dcast(prepped_data$radium, IR_MLID+IR_MLNAME+IR_Lat+IR_Long+ASSESS_ID+AU_NAME+BeneficialUse+BEN_CLASS+CAS+IRParameterName+TargetFraction+R3172ParameterName+
ParameterGroupName+AsmntAggPeriod+AsmntAggPeriodUnit+TableDescription+CriterionLabel+ParameterQualifier+SSC_MLID+SSC_StartMon+SSC_EndMon+AsmntAggFun+ActivityStartDate~CharacteristicName, value.var='IR_Value')
any(!is.na(radium_cast$`Radium-226`) & !is.na(radium_cast$`Radium-228`))
conventionals_exc=countExceedances(prepped_data$conventionals, group_vars = group_vars)
conventionals_assessed=assessExcCounts(conventionals_exc, min_n=10, max_exc_pct=10, max_exc_count_id=1)
with(conventionals_assessed, {table(R3172ParameterName, IR_Cat)})
conventionals_assessed=subset(conventionals_assessed, R3172ParameterName!='Turbidity Increase' & !(R3172ParameterName=='Minimum Dissolved Oxygen' & (AsmntAggPeriod==1 | AsmntAggPeriod==7)))
with(conventionals_assessed, {table(droplevels(R3172ParameterName), IR_Cat)})
lake_tds_exc=countExceedances(prepped_data$lakes_tds, group_vars = group_vars)
lake_tds_assessed=assessExcCounts(lake_tds_exc, min_n=2, max_exc_pct=10, max_exc_pct_id=0)
with(lake_tds_assessed, {table(R3172ParameterName, IR_Cat)})
table(droplevels(prepped_data$agg_tds$ASSESS_ID), droplevels(prepped_data$agg_tds$AU_NAME))
mean(subset(prepped_data$agg_tds, NumericCriterion==4700)$IR_Value)
mean(subset(prepped_data$agg_tds, NumericCriterion==3800)$IR_Value)
ss_mean_tds_exc=countExceedances(prepped_data$agg_tds, group_vars = group_vars)
ss_mean_tds_assessed=assessExcCounts(ss_mean_tds_exc, min_n=10, max_exc_pct=50, max_exc_count_id=1)
ss_mean_tds_assessed
View(radium_cast)
write.csv(all_record_rejections, "all_record_rejections.csv", row.names = FALSE)
getwd()
lake_profs_assessed=as.data.frame(readxl::read_excel('lake_profile_asmnts.xlsx', 'lake_profile_asmnts'))
View(lake_profs_assessed)
lake_profs_assessed=as.data.frame(readxl::read_excel('lake_profile_asmnts.xlsx', 'lake_profile_asmnts'))
# lake_profs_assessed=comb_asmnt_au
names(lake_profs_assessed)[names(lake_profs_assessed)=='au_param_Cat2020']='IR_Cat'
table(lake_profs_assessed$R3172ParameterName)
lake_profs_assessed=within(lake_profs_assessed, {
R3172ParameterName=as.character(R3172ParameterName)
R3172ParameterName[R3172ParameterName=='Dissolved oxygen (DO)']='Minimum Dissolved Oxygen'
R3172ParameterName[R3172ParameterName=='Temperature, water']='Max. Temperature'
})
prelim_asmnts=plyr::rbind.fill(conventionals_assessed,lake_tds_assessed,ss_mean_tds_assessed,toxics_assessed, lake_profs_assessed[,!names(lake_profs_assessed) %in% c('PrevCat','au_param_Cat2020','pot_delist','new_listing')])
prelim_asmnts1 = subset(prelim_asmnts, !(prelim_asmnts$IR_MLID=="UTAHDWQ_WQX-5913210"&prelim_asmnts$R3172ParameterName=="Minimum Dissolved Oxygen"))
reject = data.frame(IR_MLID="UTAHDWQ_WQX-5913210",R3172ParameterName="Minimum Dissolved Oxygen",Remove = "1")
View(reject)
prelim_asmnts1 = merge(prelim_asmnts, reject, all.x = TRUE)
prelim_asmnts1 = subset(prelim_asmnts1, is.na(prelim_asmnts1$Remove))
prelim_asmnts = prelim_asmnts[,!names(prelim_asmnts)%in%c("Remove")]
reject = data.frame(IR_MLID="UTAHDWQ_WQX-5913210",R3172ParameterName="Minimum Dissolved Oxygen",Remove = "1")
prelim_asmnts = merge(prelim_asmnts, reject, all.x = TRUE)
prelim_asmnts = subset(prelim_asmnts, is.na(prelim_asmnts1$Remove))
prelim_asmnts = prelim_asmnts[,!names(prelim_asmnts)%in%c("Remove")]
reject = data.frame(IR_MLID="UTAHDWQ_WQX-5913210",R3172ParameterName="Minimum Dissolved Oxygen",Remove = "1")
prelim_asmnts = merge(prelim_asmnts, reject, all.x = TRUE)
prelim_asmnts = subset(prelim_asmnts, is.na(prelim_asmnts$Remove))
prelim_asmnts = prelim_asmnts[,!names(prelim_asmnts)%in%c("Remove")]
View(screened_data)
View(prepped_data)
load("irdata_wqp_raw.Rdata")
load("secondary_review_record_rejections.RData")
resultids_reject = as.character(unique(all_record_rejections$ResultIdentifier))
secondary_review_rejected_records = subset(merged_results, merged_results$ResultIdentifier%in%resultids_reject)
secondary_review_rejected_records$IR_SecondaryReview_FLAG = "REJECT"
secondary_review_rejected_records$IR_SecondaryReview_COMMENT = "Determined inappropriate for IR assessment due to data concerns contained in Appendix 3 of the IR Assessment Methods"
merged_results = subset(irdata$merged_results, !(irdata$merged_results$ResultIdentifier%in%resultids_reject))
dim(merged_results) # 1351187
dim(irdata$merged_results) #1362335
length(resultids_reject)+dim(merged_results)[1]# 1362377
length(resultids_reject[!(resultids_reject%in%irdata$merged_results$ResultIdentifier)]) #42, likely SLCOWs ResultIdentifiers
resultids_reject = as.character(unique(all_record_rejections$ResultIdentifier))
secondary_review_rejected_records = subset(irdata$merged_results, irdata$merged_results$ResultIdentifier%in%resultids_reject)
secondary_review_rejected_records$IR_SecondaryReview_FLAG = "REJECT"
secondary_review_rejected_records$IR_SecondaryReview_COMMENT = "Determined inappropriate for IR assessment due to data concerns contained in Appendix 3 of the IR Assessment Methods"
merged_results = subset(irdata$merged_results, !(irdata$merged_results$ResultIdentifier%in%resultids_reject))
dim(merged_results) # 1351187
dim(irdata$merged_results) #1362335
length(resultids_reject)+dim(merged_results)[1]# 1362377
length(resultids_reject[!(resultids_reject%in%irdata$merged_results$ResultIdentifier)]) #42, likely SLCOWs ResultIdentifiers
View(secondary_review_rejected_records)
rej_dataprep = prepped_data$rej_data_reasons
rej_dataprep$IR_DataPrep_FLAG = "REJECT"
names(rej_dataprep)[names(rej_dataprep)=="reason"]="IR_DataPrep_Comment"
rejected_screening_dataprep = plyr::rbind.fill(screened_data, rej_dataprep, secondary_review_rejected_records)
View(rejected_screening_dataprep)
View(prepped_data)
ecoli_dat_assess = prepped_data$ecoli
str(ecoli_dat_assess$ActivityStartDate)
ecoli_dat_assess$ActivityStartDate = as.character(ecoli_dat_assess$ActivityStartDate)
## Remove 2010 data since it only contains October
ecoli_dat_notassess = ecoli_dat_assess[grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),] # ADD TO REJECTED DATA
ecoli_dat_notassess$IR_Cat = "Not Assessed - Out of POR"
ecoli_dat_notassess$ActivityStartDate = as.character(ecoli_dat_notassess$ActivityStartDate)
ecoli_dat_assess = ecoli_dat_assess[!grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),]
ecoli_dat_assess = droplevels(ecoli_dat_assess)
dim(prepped_data$ecoli)
62936-62108
ecoli_dat_assess = prepped_data$ecoli
orig_rec = dim(ecoli_dat_assess)[1]
## Remove 2010 data since it only contains October
ecoli_dat_notassess = ecoli_dat_assess[grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),] # ADD TO REJECTED DATA
rej_rec = dim(ecoli_dat_notassess)[1]
ecoli_dat_notassess$IR_Cat = "Not Assessed - Out of POR"
ecoli_dat_notassess$ActivityStartDate = as.character(ecoli_dat_notassess$ActivityStartDate)
ecoli_dat_assess = ecoli_dat_assess[!grepl("2010",as.character(ecoli_dat_assess$ActivityStartDate)),]
ecoli_dat_assess = droplevels(ecoli_dat_assess)
new_rec = dim(ecoli_dat_assess)[1]
new_rec+rej_rec==orig_rec
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="OD",2420,ecoli_dat_assess$IR_Value)
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="ND",1,ecoli_dat_assess$IR_Value)
test = unique(ecoli_dat_assess[,c("IR_MLID","BeneficialUse")])
test
assessed_ecoli = assessEColi(data = ecoli_dat_assess)
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="OD",2420,ecoli_dat_assess$IR_Value)
ecoli_dat_assess$IR_Value = ifelse(ecoli_dat_assess$IR_DetCond=="ND",1,ecoli_dat_assess$IR_Value)
test = unique(ecoli_dat_assess[,c("IR_MLID","BeneficialUse")])
assessed_ecoli = assessEColi(data = ecoli_dat_assess)
load("irdata_wqp_raw.Rdata")
load("secondary_review_record_rejections.RData")
resultids_reject = as.character(unique(all_record_rejections$ResultIdentifier))
secondary_review_rejected_records = subset(irdata$merged_results, irdata$merged_results$ResultIdentifier%in%resultids_reject)
secondary_review_rejected_records$IR_SecondaryReview_FLAG = "REJECT"
secondary_review_rejected_records$IR_SecondaryReview_COMMENT = "Determined inappropriate for IR assessment due to data concerns contained in Appendix 3 of the IR Assessment Methods"
merged_results = subset(irdata$merged_results, !(irdata$merged_results$ResultIdentifier%in%resultids_reject))
dim(merged_results) # 1351187
dim(irdata$merged_results) #1362335
length(resultids_reject)+dim(merged_results)[1]# 1362377
length(resultids_reject[!(resultids_reject%in%irdata$merged_results$ResultIdentifier)]) #42, likely SLCOWs ResultIdentifiers
rm(resultids_reject)
translation_wb='ir_translation_workbook_working_v13_eh - no IR_Fraction formula.xlsx'
merged_results_flagged=merged_results %>%
applyScreenTable(wb=translation_wb, sheetname="masterSiteTable", startRow=1, flag_col_name="IR_Site_FLAG", com_col_name="IR_Site_COMMENT")
rej_data=subset(merged_results_flagged, IR_Site_FLAG=='REJECT')
acc_data=subset(merged_results_flagged, IR_Site_FLAG=='ACCEPT')
(subset(acc_data, MonitoringLocationIdentifier=='UTAHDWQ_WQX-5916570' & CharacteristicName=='Magnesium'))
acc_data=acc_data%>%
applyScreenTable(wb=translation_wb, sheetname="activityMediaNameTable", startRow=1, flag_col_name="IR_ActMedia_FLAG", com_col_name="IR_ActMedia_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="labNameActivityTable", startRow=3, flag_col_name="IR_LabAct_FLAG", com_col_name="IR_LabAct_COMMENT") %>%
applyScreenTable(wb=translation_wb, sheetname="detConditionTable", startRow=3, flag_col_name="IR_DetCond_FLAG", com_col_name="IR_DetCond_COMMENT")
with(acc_data,{table(ActivityMediaName, IR_ActMedia_FLAG)})
rej_data_flag=subset(acc_data, IR_Site_FLAG=='REJECT' | IR_ActMedia_FLAG=='REJECT' | IR_LabAct_FLAG=='REJECT' | IR_DetCond_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, rej_data_flag)
acc_data=subset(acc_data, IR_Site_FLAG=='ACCEPT' & IR_ActMedia_FLAG=='ACCEPT' & (IR_LabAct_FLAG=='ACCEPT' |  IR_LabAct_FLAG=='REVIEW') & IR_DetCond_FLAG=='ACCEPT')
rm(rej_data_flag)
# COUNT CHECK
dim(merged_results)[1]==dim(merged_results_flagged)[1]
dim(acc_data)[1]+dim(rej_data)[1]==dim(merged_results_flagged)[1]
acc_data=fillMaskedValues(results=acc_data, detquantlim=irdata$detquantlim, translation_wb=translation_wb,
detLimitTypeTable_sheetname="detLimitTypeTable", detLimitTypeTable_startRow=3,
unitConvTable_sheetname="unitConvTable", unitConvTable_startRow=1, unitConvTable_startCol=1,
lql_fac=0.5, uql_fac=1)
dim(acc_data)[1]
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
acc_data=within(acc_data, {
ResultMeasure.MeasureUnitCode=ifelse(is.na(ResultMeasure.MeasureUnitCode) & !is.na(IR_Unit), as.character(IR_Unit), as.character(ResultMeasure.MeasureUnitCode))
IR_Unit_FLAG=ifelse(!is.na(ResultMeasure.MeasureUnitCode), 'ACCEPT', 'REJECT')
IR_Unit_Comment=ifelse(IR_Unit_FLAG=='ACCEPT', NA, 'No units available for data point')
})
table(acc_data$ResultMeasure.MeasureUnitCode)
table(is.na(acc_data$ResultMeasure.MeasureUnitCode))
any(acc_data$CharacteristicName =='Bis2-Chloroisopropy1Ether')
unit_rej_data=subset(acc_data, IR_Unit_FLAG!='ACCEPT')
rej_data=plyr::rbind.fill(rej_data, unit_rej_data)
acc_data=subset(acc_data, IR_Unit_FLAG=='ACCEPT')
rm(unit_rej_data)
# COUNT CHECK
dim(rej_data)[1]+dim(acc_data)[1]==dim(merged_results_flagged)[1]
acc_data=applyScreenTable(acc_data, wb=translation_wb, sheetname="paramTransTable", startRow=4, flag_col_name="IR_Parameter_FLAG", com_col_name="IR_Parameter_COMMENT")
table(acc_data$IR_Parameter_FLAG, exclude=NULL)
param_rej_data=subset(acc_data, IR_Parameter_FLAG=='REJECT')
rej_data=plyr::rbind.fill(rej_data, param_rej_data)
acc_data=subset(acc_data, IR_Parameter_FLAG=='ACCEPT' | IR_Parameter_FLAG=='REVIEW')
rm(param_rej_data)
table(acc_data$ResultSampleFractionText, acc_data$IR_Fraction, exclude=NULL)
# dim(acc_data)
# dim(rej_data)
# dim(merged_results)
acc_data=subset(acc_data, IR_Unit_FLAG=='ACCEPT')
table(is.na(acc_data$CAS))
screened_data=rej_data
# COUNT CHECK
dim(rej_data)[1]+dim(acc_data)[1]==dim(merged_results_flagged)[1]
rm(rej_data)
memory.limit(size=56000)
acc_data_criteria=assignCriteria(acc_data, crit_wb='IR_uses_standards_working_v5_eh.xlsx', crit_sheetname='criteria', ss_sheetname='ss_criteria',
crit_startRow = 3, ss_startRow = 4, rm_nocrit = TRUE, print = TRUE)
acc_data_nocrit = subset(acc_data, !(acc_data$ResultIdentifier%in%acc_data_criteria$ResultIdentifier))
# COUNT CHECK
length(unique(acc_data$ResultIdentifier))-length(unique(acc_data_criteria$ResultIdentifier))==length(unique(acc_data_nocrit$ResultIdentifier))
memory.limit(size=56000)
prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v4_ef.xlsx", startRow_formulas=3)
memory.limit(size=56000)
prepped_data=dataPrep(data=acc_data_criteria, translation_wb=translation_wb, cf_formulas_sheetname="cf_formulas", crit_wb="IR_uses_standards_working_v5_eh.xlsx", startRow_formulas=3)
objects(prepped_data)
rej_dataprep = prepped_data$rej_data_reasons
rej_dataprep$IR_DataPrep_FLAG = "REJECT"
names(rej_dataprep)[names(rej_dataprep)=="reason"]="IR_DataPrep_Comment"
rejected_screening_dataprep = plyr::rbind.fill(screened_data, rej_dataprep, secondary_review_rejected_records)
rm(screened_data, rej_dataprep, secondary_review_rejected_records)
length(unique(rejected_screening_dataprep$ResultIdentifier))+length(unique(prepped_data$acc_data))==length(unique(irdata$merged_results$ResultIdentifier))
length(unique(rejected_screening_dataprep$ResultIdentifier))+length(unique(prepped_data$acc_data$ResultIdentifier))==length(unique(irdata$merged_results$ResultIdentifier))
length(unique(rejected_screening_dataprep$ResultIdentifier))
length(unique(prepped_data$acc_data$ResultIdentifier))
length(unique(irdata$merged_results$ResultIdentifier))
867728+368829
1362335-1236557
length(unique(acc_data_criteria$ResultIdentifier))
rej_dataprep = prepped_data$rej_data_reasons
rej_dataprep$IR_DataPrep_FLAG = "REJECT"
names(rej_dataprep)[names(rej_dataprep)=="reason"]="IR_DataPrep_Comment"
length(unique(rej_dataprep$ResultIdentifier))
616899+173653
length(unique(acc_data_criteria$ResultIdentifier))
length(unique(prepped_data$acc_data$ResultIdentifier))
length(rej_dataprep)
length(rej_dataprep$ResultIdentifier)
length(unique(rej_dataprep$ResultIdentifier))+length(unique(prepped_data$acc_data$ResultIdentifier))==length(unique(acc_data_criteria$ResultIdentifier))
length(unique(rej_dataprep$ResultIdentifier))
length(unique(prepped_data$acc_data$ResultIdentifier))
length(unique(acc_data_criteria$ResultIdentifier))
616899-368829-173653
74417+51361
length(unique(irdata$merged_results$ResultIdentifier))-length(unique(rejected_screening_dataprep$ResultIdentifier))-length(unique(prepped_data$acc_data$ResultIdentifier))
length(unique(acc_data_criteria$ResultIdentifier))-length(unique(rej_dataprep$ResultIdentifier))-length(unique(prepped_data$acc_data$ResultIdentifier))
translation_wb=translation_wb
cf_formulas_sheetname="cf_formulas"
crit_wb="IR_uses_standards_working_v5_eh.xlsx"
startRow_formulas=3
data = acc_data_criteria
startRow_unit=1
split_agg_tds=TRUE
result=list()
# aggregate to daily values function
#x=toxics_strms
#value_var="IR_Value"
#agg_var="DailyAggFun"
aggDVbyfun=function(x, value_var, drop_vars, agg_var){
val=x[,value_var]
x=x[,!names(x) %in% value_var & !names(x) %in% drop_vars]
num_names=names(x[unlist(lapply(x, is.numeric))])
x=as.data.frame(lapply(x, addNA, ifany=T)) #Add NA as factor level where cols contain NAs (converts everything to factor)
x=data.frame(val,x) #Add back in preserved numeric val (alternatively could allow it to convert to factor then use as.numeric(levels(z))[z])
x=x[,!names(x) %in% drop_vars]
daily=x[0,]
funs=unique(x[,agg_var])
for(n in 1:length(funs)){
fun_n=funs[n]
x_n=x[x[,agg_var]==fun_n,]
daily_n=aggregate(val~.,x_n, FUN=get(paste(fun_n)))
daily=rbind(daily,daily_n)
}
daily[num_names]=lapply(daily[num_names], wqTools::facToNum) #Convert numeric cols back to numeric
names(daily)[names(daily)=="val"]=value_var #Rename value_var
return(daily)
}
#Column names to pass through function
col_names=c("ResultIdentifier","OrganizationIdentifier","ActivityIdentifier","ActivityStartDate","ActivityStartTime.Time","IR_ActivityType","IR_MLID","IR_MLNAME","MonitoringLocationIdentifier","MonitoringLocationTypeName","R317Descrp","IR_Lat","IR_Long",
"ASSESS_ID","AU_NAME","AU_Type","BeneficialUse","BEN_CLASS","CharacteristicName","ParameterGroupName",
"CAS", "IRParameterName", "R3172ParameterName","IR_Value","IR_Unit","ResultMeasure.MeasureUnitCode","IR_DetCond","ResultSampleFractionText","IR_Fraction","CriterionUnits","TargetFraction",
"IR_LowerLimitValue","IR_LowerLimitUnit","IR_UpperLimitValue","IR_UpperLimitUnit",
"DataLoggerLine","ActivityRelativeDepthName","ActivityDepthHeightMeasure.MeasureValue","ActivityDepthHeightMeasure.MeasureUnitCode",
"AssessmentType","TableDescription","CriterionLabel","CriterionType","ParameterQualifier", "FrequencyCombined", "FrequencyNumber", "FrequencyUnit","TargetActivityType",
"DailyAggFun","AsmntAggPeriod","AsmntAggPeriodUnit","AsmntAggFun","NumericCriterion","SSC_StartMon","SSC_EndMon","SSC_MLID",
"IR_Site_FLAG","IR_ActMedia_FLAG","IR_LabAct_FLAG","IR_DetCond_FLAG","IR_Unit_FLAG","IR_Parameter_FLAG"
)
### Upload export translation workbook
exp_file=system.file("extdata", "IR_export_translations.xlsx", package = "irTools")
exp_wb = openxlsx::loadWorkbook(exp_file)
# Read in columns from translation workbook
columns = openxlsx::readWorkbook(exp_wb, sheet = 1)
colnames_exp = columns$COL_KEEP[columns$SHEET=="DA"]
reasons=data.frame(data[0,])
reasons$reason=character(0)
#Remove records w/o criteria (in case they have been optionally passed through assignCriteria - these cause errors in aggregation steps as they do not have aggregation functions specified)
count=length(data$CriterionUnits[is.na(data$CriterionUnits)])
if(count>0){warning(paste(count, 'records being removed due to lack of criteria & units in standards table. These may have been purposely passed through in assign criteria.'))}
data=data[!is.na(data$CriterionUnits),]# | data$BeneficialUse=="CF" | data$R3172ParameterName=="Profile depth",]
table(data$BeneficialUse)
####################################
######Activity type check###########
####################################
data_n=data
data_n$reason=NA
data_n=within(data_n,{
reason[IR_ActivityType!=TargetActivityType & BeneficialUse!='SUP']="Non-assessed activity type for parameter"
})
data_n=data_n[!is.na(data_n$reason),]
reasons=rbind(reasons, data_n[!is.na(data_n$reason),])
table(reasons$BeneficialUse)
unique(data_n$ResultIdentifier)
length(unique(data_n$ResultIdentifier))
####################################
######Result value present check####
####################################
data_n=data
data_n$reason=NA
data_n=within(data_n,{
reason[is.na(IR_Value)]="No result value or detection limit"
})
